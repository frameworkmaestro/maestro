<text xml:space="preserve">
= Controles =
Os '''controles''' (também chamados ''widgets'') são componentes visuais utilizados para construir a interface com o usuário (através das [[>guia/view/view|Views]]). Os controles são classes programadas em PHP5 e que encapsulam controles HTML/Javascript. No Maestro, os controles podem ser totalmente criados pelos desenvolvedores ou herdar da classe <code>Maestro\UI\MBaseControl</code>. A renderização do controle é responsabilidade do [[>guia/view/temas|Tema]].

Quando a ''View'' é definida através de XML, os atributos CSS podem ser definidos diretamente como propriedades do objeto referente ao controle. Em PHP, os atributos CSS  podem ser definidos diretamente como propriedades do controle.


Em XML:
<pre lang="xml">
  <mcontentpane id="myPane" width="300px" height="100px" color="red" border="1px solid blue">
     <mlabel text="Texto em vermelho"/>
  </mcontentpane>
</pre>


Em PHP:
<pre lang="php">
  $label = new MLabel(['text'=>'Texto em vermelho']);
  $pane = new MContentPane(['id'=>'myPane', 'width' => '300px', 'height' => '100px', 'color' => 'red']);
  $pane->addStyle('border','1px solid blue');
  $pane->addControl($label);
</pre>


As classes CSS podem ser definidas diretamente, através da propriedade <code>class</code>, ou via o método <code>setClass()</code>:
Em XML:
<pre lang="xml">
  <mlabel text="Texto em vermelho" class="redText"/>
</pre>

Em PHP:
<pre lang="php">
  $label = new MLabel(['text'=>'Texto em vermelho']);
  $label->setClass('redText');
</pre>

Um controle criado pelo desenvolvedor deve ser definido em um arquivo próprio e localizado no ''Tema'' (geralmente na pasta <code>aplicação/public/themes/tema/classes</code>. O desenvolvedor também pode construir controles próprios de uma aplicação (geralmente como [[>guia/view/componentes|Componentes]]) com base em controles já existentes, através de herança ou composição.


== Identificação dos controles ==
Na geração da página HTML, cada controle deve possuir sua própria identificação, através da qual pode ser referenciado. Esta identificação é feita através dos atributos <code>id</code> e <code>name</code>.
O atributo <code>id</code> é necessário para operações no [http://en.wikipedia.org/wiki/Document_Object_Model|DOM|_blank] e o atributo <code>name</code> é necessário em operações feitas pelo browser (tais como a submissão de formulários).
O atributo <code>id</code> pode ser definido pelo desenvolvedor, ou pode ser atribuído dinamicamente pelo Maestro. No caso da submissão via POST, os valores dos controles são agrupados no [[>guia/fundamentos/dto|objeto $data]] para que possam ser tratados pelas ''actions''.
Este atributo pode ser expresso em 3 formatos:
*um nome simples, ex. <code>id="idPessoa"</code>
*um elemento de array, ex. <code>id="pessoa[idPessoa]"</code> (no objeto $data, "pessoa" será um array associativo)
*um atributo de objeto, ex. <code>id="pessoa::idPessoa"</code> (no objeto $data, "pessoa" será um objeto plano)

Os formatos de array ou objeto são úteis para agrupar os dados de um formulário referentes a uma mesma entidade.
</text>